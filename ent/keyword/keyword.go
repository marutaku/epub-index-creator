// Code generated by ent, DO NOT EDIT.

package keyword

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the keyword type in the database.
	Label = "keyword"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKeyword holds the string denoting the keyword field in the database.
	FieldKeyword = "keyword"
	// EdgePage holds the string denoting the page edge name in mutations.
	EdgePage = "page"
	// Table holds the table name of the keyword in the database.
	Table = "keywords"
	// PageTable is the table that holds the page relation/edge.
	PageTable = "keywords"
	// PageInverseTable is the table name for the Page entity.
	// It exists in this package in order to avoid circular dependency with the "page" package.
	PageInverseTable = "pages"
	// PageColumn is the table column denoting the page relation/edge.
	PageColumn = "page_keywords"
)

// Columns holds all SQL columns for keyword fields.
var Columns = []string{
	FieldID,
	FieldKeyword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "keywords"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"page_keywords",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// KeywordValidator is a validator for the "keyword" field. It is called by the builders before save.
	KeywordValidator func(string) error
)

// OrderOption defines the ordering options for the Keyword queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByKeyword orders the results by the keyword field.
func ByKeyword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKeyword, opts...).ToFunc()
}

// ByPageField orders the results by page field.
func ByPageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPageStep(), sql.OrderByField(field, opts...))
	}
}
func newPageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PageTable, PageColumn),
	)
}
