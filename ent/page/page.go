// Code generated by ent, DO NOT EDIT.

package page

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the page type in the database.
	Label = "page"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldPath holds the string denoting the path field in the database.
	FieldPath = "path"
	// EdgeBook holds the string denoting the book edge name in mutations.
	EdgeBook = "book"
	// EdgeKeywords holds the string denoting the keywords edge name in mutations.
	EdgeKeywords = "keywords"
	// Table holds the table name of the page in the database.
	Table = "pages"
	// BookTable is the table that holds the book relation/edge.
	BookTable = "pages"
	// BookInverseTable is the table name for the Book entity.
	// It exists in this package in order to avoid circular dependency with the "book" package.
	BookInverseTable = "books"
	// BookColumn is the table column denoting the book relation/edge.
	BookColumn = "book_pages"
	// KeywordsTable is the table that holds the keywords relation/edge.
	KeywordsTable = "keywords"
	// KeywordsInverseTable is the table name for the Keyword entity.
	// It exists in this package in order to avoid circular dependency with the "keyword" package.
	KeywordsInverseTable = "keywords"
	// KeywordsColumn is the table column denoting the keywords relation/edge.
	KeywordsColumn = "page_keywords"
)

// Columns holds all SQL columns for page fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldPath,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "pages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"book_pages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// PathValidator is a validator for the "path" field. It is called by the builders before save.
	PathValidator func(string) error
)

// OrderOption defines the ordering options for the Page queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByPath orders the results by the path field.
func ByPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPath, opts...).ToFunc()
}

// ByBookField orders the results by book field.
func ByBookField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBookStep(), sql.OrderByField(field, opts...))
	}
}

// ByKeywordsCount orders the results by keywords count.
func ByKeywordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newKeywordsStep(), opts...)
	}
}

// ByKeywords orders the results by keywords terms.
func ByKeywords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newKeywordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBookStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BookInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, BookTable, BookColumn),
	)
}
func newKeywordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(KeywordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, KeywordsTable, KeywordsColumn),
	)
}
