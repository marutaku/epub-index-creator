// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator client
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package epubindexcreator

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "epub_index_creator" service client.
type Client struct {
	ListBooksEndpoint          goa.Endpoint
	FindBookEndpoint           goa.Endpoint
	CreateBookEndpoint         goa.Endpoint
	UpdateBookEndpoint         goa.Endpoint
	DeleteBookEndpoint         goa.Endpoint
	ListPagesEndpoint          goa.Endpoint
	FindPageEndpoint           goa.Endpoint
	CreatePageEndpoint         goa.Endpoint
	UpdatePageEndpoint         goa.Endpoint
	DeletePageEndpoint         goa.Endpoint
	ListKeywordsInPageEndpoint goa.Endpoint
}

// NewClient initializes a "epub_index_creator" service client given the
// endpoints.
func NewClient(listBooks, findBook, createBook, updateBook, deleteBook, listPages, findPage, createPage, updatePage, deletePage, listKeywordsInPage goa.Endpoint) *Client {
	return &Client{
		ListBooksEndpoint:          listBooks,
		FindBookEndpoint:           findBook,
		CreateBookEndpoint:         createBook,
		UpdateBookEndpoint:         updateBook,
		DeleteBookEndpoint:         deleteBook,
		ListPagesEndpoint:          listPages,
		FindPageEndpoint:           findPage,
		CreatePageEndpoint:         createPage,
		UpdatePageEndpoint:         updatePage,
		DeletePageEndpoint:         deletePage,
		ListKeywordsInPageEndpoint: listKeywordsInPage,
	}
}

// ListBooks calls the "ListBooks" endpoint of the "epub_index_creator" service.
func (c *Client) ListBooks(ctx context.Context, p *ListBooksPayload) (res []*BookResponse, err error) {
	var ires any
	ires, err = c.ListBooksEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*BookResponse), nil
}

// FindBook calls the "FindBook" endpoint of the "epub_index_creator" service.
func (c *Client) FindBook(ctx context.Context, p *FindBookPayload) (res *BookResponse, err error) {
	var ires any
	ires, err = c.FindBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*BookResponse), nil
}

// CreateBook calls the "CreateBook" endpoint of the "epub_index_creator"
// service.
func (c *Client) CreateBook(ctx context.Context, p *BookRequest) (res *BookResponse, err error) {
	var ires any
	ires, err = c.CreateBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*BookResponse), nil
}

// UpdateBook calls the "UpdateBook" endpoint of the "epub_index_creator"
// service.
func (c *Client) UpdateBook(ctx context.Context, p *BookRequest) (res *BookResponse, err error) {
	var ires any
	ires, err = c.UpdateBookEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*BookResponse), nil
}

// DeleteBook calls the "DeleteBook" endpoint of the "epub_index_creator"
// service.
func (c *Client) DeleteBook(ctx context.Context, p *DeleteBookPayload) (err error) {
	_, err = c.DeleteBookEndpoint(ctx, p)
	return
}

// ListPages calls the "ListPages" endpoint of the "epub_index_creator" service.
func (c *Client) ListPages(ctx context.Context, p *ListPagesPayload) (res []*PageResponse, err error) {
	var ires any
	ires, err = c.ListPagesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*PageResponse), nil
}

// FindPage calls the "FindPage" endpoint of the "epub_index_creator" service.
func (c *Client) FindPage(ctx context.Context, p *FindPagePayload) (res *PageResponse, err error) {
	var ires any
	ires, err = c.FindPageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PageResponse), nil
}

// CreatePage calls the "CreatePage" endpoint of the "epub_index_creator"
// service.
func (c *Client) CreatePage(ctx context.Context, p *CreatePagePayload) (res *PageResponse, err error) {
	var ires any
	ires, err = c.CreatePageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PageResponse), nil
}

// UpdatePage calls the "UpdatePage" endpoint of the "epub_index_creator"
// service.
func (c *Client) UpdatePage(ctx context.Context, p *UpdatePagePayload) (res *PageResponse, err error) {
	var ires any
	ires, err = c.UpdatePageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*PageResponse), nil
}

// DeletePage calls the "DeletePage" endpoint of the "epub_index_creator"
// service.
func (c *Client) DeletePage(ctx context.Context, p *DeletePagePayload) (err error) {
	_, err = c.DeletePageEndpoint(ctx, p)
	return
}

// ListKeywordsInPage calls the "ListKeywordsInPage" endpoint of the
// "epub_index_creator" service.
func (c *Client) ListKeywordsInPage(ctx context.Context, p *ListKeywordsInPagePayload) (res []*KeywordResponse, err error) {
	var ires any
	ires, err = c.ListKeywordsInPageEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.([]*KeywordResponse), nil
}
