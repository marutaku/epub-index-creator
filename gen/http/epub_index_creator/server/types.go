// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP server types
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package server

import (
	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
	goa "goa.design/goa/v3/pkg"
)

// ListBooksRequestBody is the type of the "epub_index_creator" service
// "ListBooks" endpoint HTTP request body.
type ListBooksRequestBody struct {
	// Maximum number of books to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// Field to paginate books
	Offset *int `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
}

// CreateBookRequestBody is the type of the "epub_index_creator" service
// "CreateBook" endpoint HTTP request body.
type CreateBookRequestBody struct {
	// ISBN of the book
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Language of the book
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	// Pages of the book
	Pages []*PageRequestBody `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
}

// UpdateBookRequestBody is the type of the "epub_index_creator" service
// "UpdateBook" endpoint HTTP request body.
type UpdateBookRequestBody struct {
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Language of the book
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
}

// DeleteBookRequestBody is the type of the "epub_index_creator" service
// "DeleteBook" endpoint HTTP request body.
type DeleteBookRequestBody struct {
	Book *BookRequestBody `form:"book,omitempty" json:"book,omitempty" xml:"book,omitempty"`
}

// CreatePageRequestBody is the type of the "epub_index_creator" service
// "CreatePage" endpoint HTTP request body.
type CreatePageRequestBody struct {
	Page *CreatePageRequestRequestBody `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
}

// ListBooksResponseBody is the type of the "epub_index_creator" service
// "ListBooks" endpoint HTTP response body.
type ListBooksResponseBody []*BookResponse

// FindBookResponseBody is the type of the "epub_index_creator" service
// "FindBook" endpoint HTTP response body.
type FindBookResponseBody struct {
	// ISBN of the book
	Isbn string `form:"isbn" json:"isbn" xml:"isbn"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Language of the book
	Language string `form:"language" json:"language" xml:"language"`
	// Publisher of the book
	Publisher string `form:"publisher" json:"publisher" xml:"publisher"`
	// Pages of the book
	Pages []*PageResponseBody `form:"pages" json:"pages" xml:"pages"`
}

// CreateBookResponseBody is the type of the "epub_index_creator" service
// "CreateBook" endpoint HTTP response body.
type CreateBookResponseBody struct {
	// ISBN of the book
	Isbn string `form:"isbn" json:"isbn" xml:"isbn"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Language of the book
	Language string `form:"language" json:"language" xml:"language"`
	// Publisher of the book
	Publisher string `form:"publisher" json:"publisher" xml:"publisher"`
	// Pages of the book
	Pages []*PageResponseBody `form:"pages" json:"pages" xml:"pages"`
}

// UpdateBookResponseBody is the type of the "epub_index_creator" service
// "UpdateBook" endpoint HTTP response body.
type UpdateBookResponseBody struct {
	// ISBN of the book
	Isbn string `form:"isbn" json:"isbn" xml:"isbn"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Language of the book
	Language string `form:"language" json:"language" xml:"language"`
	// Publisher of the book
	Publisher string `form:"publisher" json:"publisher" xml:"publisher"`
	// Pages of the book
	Pages []*PageResponseBody `form:"pages" json:"pages" xml:"pages"`
}

// CreatePageResponseBody is the type of the "epub_index_creator" service
// "CreatePage" endpoint HTTP response body.
type CreatePageResponseBody struct {
	// Title of the page
	Title string `form:"title" json:"title" xml:"title"`
	// Keywords of the page
	Keywords []*KeywordResponseBody `form:"keywords" json:"keywords" xml:"keywords"`
}

// BookResponse is used to define fields on response body types.
type BookResponse struct {
	// ISBN of the book
	Isbn string `form:"isbn" json:"isbn" xml:"isbn"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Language of the book
	Language string `form:"language" json:"language" xml:"language"`
	// Publisher of the book
	Publisher string `form:"publisher" json:"publisher" xml:"publisher"`
	// Pages of the book
	Pages []*PageResponse `form:"pages" json:"pages" xml:"pages"`
}

// PageResponse is used to define fields on response body types.
type PageResponse struct {
	// Title of the page
	Title string `form:"title" json:"title" xml:"title"`
	// Keywords of the page
	Keywords []*KeywordResponse `form:"keywords" json:"keywords" xml:"keywords"`
}

// KeywordResponse is used to define fields on response body types.
type KeywordResponse struct {
	// Keyword of the page
	Keyword string `form:"keyword" json:"keyword" xml:"keyword"`
}

// PageResponseBody is used to define fields on response body types.
type PageResponseBody struct {
	// Title of the page
	Title string `form:"title" json:"title" xml:"title"`
	// Keywords of the page
	Keywords []*KeywordResponseBody `form:"keywords" json:"keywords" xml:"keywords"`
}

// KeywordResponseBody is used to define fields on response body types.
type KeywordResponseBody struct {
	// Keyword of the page
	Keyword string `form:"keyword" json:"keyword" xml:"keyword"`
}

// PageRequestBody is used to define fields on request body types.
type PageRequestBody struct {
	// Title of the page
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Keywords of the page
	Keywords []*KeywordRequestBody `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// KeywordRequestBody is used to define fields on request body types.
type KeywordRequestBody struct {
	// Keyword of the page
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
}

// BookRequestBody is used to define fields on request body types.
type BookRequestBody struct {
	// ISBN of the book
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Language of the book
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	// Pages of the book
	Pages []*PageRequestBody `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
}

// CreatePageRequestRequestBody is used to define fields on request body types.
type CreatePageRequestRequestBody struct {
	// Title of the page
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Keywords of the page
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// NewListBooksResponseBody builds the HTTP response body from the result of
// the "ListBooks" endpoint of the "epub_index_creator" service.
func NewListBooksResponseBody(res []*epubindexcreator.Book) ListBooksResponseBody {
	body := make([]*BookResponse, len(res))
	for i, val := range res {
		body[i] = marshalEpubindexcreatorBookToBookResponse(val)
	}
	return body
}

// NewFindBookResponseBody builds the HTTP response body from the result of the
// "FindBook" endpoint of the "epub_index_creator" service.
func NewFindBookResponseBody(res *epubindexcreator.Book) *FindBookResponseBody {
	body := &FindBookResponseBody{
		Isbn:      res.Isbn,
		Title:     res.Title,
		Author:    res.Author,
		Language:  res.Language,
		Publisher: res.Publisher,
	}
	if res.Pages != nil {
		body.Pages = make([]*PageResponseBody, len(res.Pages))
		for i, val := range res.Pages {
			body.Pages[i] = marshalEpubindexcreatorPageToPageResponseBody(val)
		}
	} else {
		body.Pages = []*PageResponseBody{}
	}
	return body
}

// NewCreateBookResponseBody builds the HTTP response body from the result of
// the "CreateBook" endpoint of the "epub_index_creator" service.
func NewCreateBookResponseBody(res *epubindexcreator.Book) *CreateBookResponseBody {
	body := &CreateBookResponseBody{
		Isbn:      res.Isbn,
		Title:     res.Title,
		Author:    res.Author,
		Language:  res.Language,
		Publisher: res.Publisher,
	}
	if res.Pages != nil {
		body.Pages = make([]*PageResponseBody, len(res.Pages))
		for i, val := range res.Pages {
			body.Pages[i] = marshalEpubindexcreatorPageToPageResponseBody(val)
		}
	} else {
		body.Pages = []*PageResponseBody{}
	}
	return body
}

// NewUpdateBookResponseBody builds the HTTP response body from the result of
// the "UpdateBook" endpoint of the "epub_index_creator" service.
func NewUpdateBookResponseBody(res *epubindexcreator.Book) *UpdateBookResponseBody {
	body := &UpdateBookResponseBody{
		Isbn:      res.Isbn,
		Title:     res.Title,
		Author:    res.Author,
		Language:  res.Language,
		Publisher: res.Publisher,
	}
	if res.Pages != nil {
		body.Pages = make([]*PageResponseBody, len(res.Pages))
		for i, val := range res.Pages {
			body.Pages[i] = marshalEpubindexcreatorPageToPageResponseBody(val)
		}
	} else {
		body.Pages = []*PageResponseBody{}
	}
	return body
}

// NewCreatePageResponseBody builds the HTTP response body from the result of
// the "CreatePage" endpoint of the "epub_index_creator" service.
func NewCreatePageResponseBody(res *epubindexcreator.Page) *CreatePageResponseBody {
	body := &CreatePageResponseBody{
		Title: res.Title,
	}
	if res.Keywords != nil {
		body.Keywords = make([]*KeywordResponseBody, len(res.Keywords))
		for i, val := range res.Keywords {
			body.Keywords[i] = marshalEpubindexcreatorKeywordToKeywordResponseBody(val)
		}
	} else {
		body.Keywords = []*KeywordResponseBody{}
	}
	return body
}

// NewListBooksPayload builds a epub_index_creator service ListBooks endpoint
// payload.
func NewListBooksPayload(body *ListBooksRequestBody) *epubindexcreator.ListBooksPayload {
	v := &epubindexcreator.ListBooksPayload{}
	if body.Limit != nil {
		v.Limit = *body.Limit
	}
	if body.Offset != nil {
		v.Offset = *body.Offset
	}
	if body.Limit == nil {
		v.Limit = 100
	}
	if body.Offset == nil {
		v.Offset = 0
	}

	return v
}

// NewFindBookPayload builds a epub_index_creator service FindBook endpoint
// payload.
func NewFindBookPayload(isbn string) *epubindexcreator.FindBookPayload {
	v := &epubindexcreator.FindBookPayload{}
	v.Isbn = isbn

	return v
}

// NewCreateBookBook builds a epub_index_creator service CreateBook endpoint
// payload.
func NewCreateBookBook(body *CreateBookRequestBody) *epubindexcreator.Book {
	v := &epubindexcreator.Book{
		Isbn:      *body.Isbn,
		Title:     *body.Title,
		Author:    *body.Author,
		Language:  *body.Language,
		Publisher: *body.Publisher,
	}
	v.Pages = make([]*epubindexcreator.Page, len(body.Pages))
	for i, val := range body.Pages {
		v.Pages[i] = unmarshalPageRequestBodyToEpubindexcreatorPage(val)
	}

	return v
}

// NewUpdateBookPayload builds a epub_index_creator service UpdateBook endpoint
// payload.
func NewUpdateBookPayload(body *UpdateBookRequestBody, isbn string) *epubindexcreator.UpdateBookPayload {
	v := &epubindexcreator.UpdateBookPayload{
		Title:     *body.Title,
		Author:    *body.Author,
		Language:  *body.Language,
		Publisher: *body.Publisher,
	}
	v.Isbn = isbn

	return v
}

// NewDeleteBookPayload builds a epub_index_creator service DeleteBook endpoint
// payload.
func NewDeleteBookPayload(body *DeleteBookRequestBody, isbn string) *epubindexcreator.DeleteBookPayload {
	v := &epubindexcreator.DeleteBookPayload{}
	v.Book = unmarshalBookRequestBodyToEpubindexcreatorBook(body.Book)
	v.Isbn = isbn

	return v
}

// NewCreatePagePayload builds a epub_index_creator service CreatePage endpoint
// payload.
func NewCreatePagePayload(body *CreatePageRequestBody, isbn string) *epubindexcreator.CreatePagePayload {
	v := &epubindexcreator.CreatePagePayload{}
	v.Page = unmarshalCreatePageRequestRequestBodyToEpubindexcreatorCreatePageRequest(body.Page)
	v.Isbn = isbn

	return v
}

// ValidateListBooksRequestBody runs the validations defined on
// ListBooksRequestBody
func ValidateListBooksRequestBody(body *ListBooksRequestBody) (err error) {
	if body.Limit != nil {
		if *body.Limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", *body.Limit, 1, true))
		}
	}
	if body.Limit != nil {
		if *body.Limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.limit", *body.Limit, 100, false))
		}
	}
	if body.Offset != nil {
		if *body.Offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("body.offset", *body.Offset, 0, true))
		}
	}
	return
}

// ValidateCreateBookRequestBody runs the validations defined on
// CreateBookRequestBody
func ValidateCreateBookRequestBody(body *CreateBookRequestBody) (err error) {
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Publisher == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publisher", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	for _, e := range body.Pages {
		if e != nil {
			if err2 := ValidatePageRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateBookRequestBody runs the validations defined on
// UpdateBookRequestBody
func ValidateUpdateBookRequestBody(body *UpdateBookRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Publisher == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publisher", "body"))
	}
	return
}

// ValidateDeleteBookRequestBody runs the validations defined on
// DeleteBookRequestBody
func ValidateDeleteBookRequestBody(body *DeleteBookRequestBody) (err error) {
	if body.Book == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("book", "body"))
	}
	if body.Book != nil {
		if err2 := ValidateBookRequestBody(body.Book); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreatePageRequestBody runs the validations defined on
// CreatePageRequestBody
func ValidateCreatePageRequestBody(body *CreatePageRequestBody) (err error) {
	if body.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
	}
	if body.Page != nil {
		if err2 := ValidateCreatePageRequestRequestBody(body.Page); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidatePageRequestBody runs the validations defined on PageRequestBody
func ValidatePageRequestBody(body *PageRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Keywords == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keywords", "body"))
	}
	for _, e := range body.Keywords {
		if e != nil {
			if err2 := ValidateKeywordRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateKeywordRequestBody runs the validations defined on KeywordRequestBody
func ValidateKeywordRequestBody(body *KeywordRequestBody) (err error) {
	if body.Keyword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keyword", "body"))
	}
	return
}

// ValidateBookRequestBody runs the validations defined on BookRequestBody
func ValidateBookRequestBody(body *BookRequestBody) (err error) {
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Publisher == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publisher", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	for _, e := range body.Pages {
		if e != nil {
			if err2 := ValidatePageRequestBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreatePageRequestRequestBody runs the validations defined on
// CreatePageRequestRequestBody
func ValidateCreatePageRequestRequestBody(body *CreatePageRequestRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	return
}
