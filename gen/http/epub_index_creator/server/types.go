// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP server types
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package server

import (
	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
)

// ListResponseBody is the type of the "epub_index_creator" service "List"
// endpoint HTTP response body.
type ListResponseBody struct {
	// ISBN of the book
	Isbn string `form:"isbn" json:"isbn" xml:"isbn"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Pages of the book
	Pages []*PageResponseBody `form:"pages" json:"pages" xml:"pages"`
}

// PageResponseBody is used to define fields on response body types.
type PageResponseBody struct {
	// Title of the page
	Title string `form:"title" json:"title" xml:"title"`
	// Keywords of the page
	Keywords []*KeywordResponseBody `form:"keywords" json:"keywords" xml:"keywords"`
}

// KeywordResponseBody is used to define fields on response body types.
type KeywordResponseBody struct {
	// Keyword of the page
	Keyword string `form:"keyword" json:"keyword" xml:"keyword"`
}

// NewListResponseBody builds the HTTP response body from the result of the
// "List" endpoint of the "epub_index_creator" service.
func NewListResponseBody(res *epubindexcreator.Book) *ListResponseBody {
	body := &ListResponseBody{
		Isbn:   res.Isbn,
		Title:  res.Title,
		Author: res.Author,
	}
	if res.Pages != nil {
		body.Pages = make([]*PageResponseBody, len(res.Pages))
		for i, val := range res.Pages {
			body.Pages[i] = marshalEpubindexcreatorPageToPageResponseBody(val)
		}
	} else {
		body.Pages = []*PageResponseBody{}
	}
	return body
}

// NewListPayload builds a epub_index_creator service List endpoint payload.
func NewListPayload(isbn string) *epubindexcreator.ListPayload {
	v := &epubindexcreator.ListPayload{}
	v.Isbn = isbn

	return v
}
