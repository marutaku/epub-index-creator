// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package server

import (
	"context"
	"net/http"

	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListResponse returns an encoder for responses returned by the
// epub_index_creator List endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*epubindexcreator.Book)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the
// epub_index_creator List endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			isbn string

			params = mux.Vars(r)
		)
		isbn = params["isbn"]
		payload := NewListPayload(isbn)

		return payload, nil
	}
}

// marshalEpubindexcreatorPageToPageResponseBody builds a value of type
// *PageResponseBody from a value of type *epubindexcreator.Page.
func marshalEpubindexcreatorPageToPageResponseBody(v *epubindexcreator.Page) *PageResponseBody {
	res := &PageResponseBody{
		Title: v.Title,
	}
	if v.Keywords != nil {
		res.Keywords = make([]*KeywordResponseBody, len(v.Keywords))
		for i, val := range v.Keywords {
			res.Keywords[i] = marshalEpubindexcreatorKeywordToKeywordResponseBody(val)
		}
	} else {
		res.Keywords = []*KeywordResponseBody{}
	}

	return res
}

// marshalEpubindexcreatorKeywordToKeywordResponseBody builds a value of type
// *KeywordResponseBody from a value of type *epubindexcreator.Keyword.
func marshalEpubindexcreatorKeywordToKeywordResponseBody(v *epubindexcreator.Keyword) *KeywordResponseBody {
	res := &KeywordResponseBody{
		Keyword: v.Keyword,
	}

	return res
}
