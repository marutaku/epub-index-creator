// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package server

import (
	"context"
	"io"
	"net/http"
	"strconv"

	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListBooksResponse returns an encoder for responses returned by the
// epub_index_creator ListBooks endpoint.
func EncodeListBooksResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.([]*epubindexcreator.BookResponse)
		enc := encoder(ctx, w)
		body := NewListBooksResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListBooksRequest returns a decoder for requests sent to the
// epub_index_creator ListBooks endpoint.
func DecodeListBooksRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			limit  int
			offset int
			err    error
		)
		{
			limitRaw := r.URL.Query().Get("limit")
			if limitRaw == "" {
				limit = 100
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if limit < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 1, true))
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		{
			offsetRaw := r.URL.Query().Get("offset")
			if offsetRaw != "" {
				v, err2 := strconv.ParseInt(offsetRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("offset", offsetRaw, "integer"))
				}
				offset = int(v)
			}
		}
		if offset < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("offset", offset, 0, true))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListBooksPayload(limit, offset)

		return payload, nil
	}
}

// EncodeFindBookResponse returns an encoder for responses returned by the
// epub_index_creator FindBook endpoint.
func EncodeFindBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*epubindexcreator.BookResponse)
		enc := encoder(ctx, w)
		body := NewFindBookOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeFindBookRequest returns a decoder for requests sent to the
// epub_index_creator FindBook endpoint.
func DecodeFindBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			isbn string
			err  error

			params = mux.Vars(r)
		)
		isbn = params["isbn"]
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{13}$"))
		if err != nil {
			return nil, err
		}
		payload := NewFindBookPayload(isbn)

		return payload, nil
	}
}

// EncodeCreateBookResponse returns an encoder for responses returned by the
// epub_index_creator CreateBook endpoint.
func EncodeCreateBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*epubindexcreator.BookResponse)
		enc := encoder(ctx, w)
		body := NewCreateBookOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateBookRequest returns a decoder for requests sent to the
// epub_index_creator CreateBook endpoint.
func DecodeCreateBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateBookRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateBookRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateBookBookRequest(&body)

		return payload, nil
	}
}

// EncodeUpdateBookResponse returns an encoder for responses returned by the
// epub_index_creator UpdateBook endpoint.
func EncodeUpdateBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*epubindexcreator.BookResponse)
		enc := encoder(ctx, w)
		body := NewUpdateBookOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateBookRequest returns a decoder for requests sent to the
// epub_index_creator UpdateBook endpoint.
func DecodeUpdateBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateBookRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateBookRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			isbn string

			params = mux.Vars(r)
		)
		isbn = params["isbn"]
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{13}$"))
		if err != nil {
			return nil, err
		}
		payload := NewUpdateBookBookRequest(&body, isbn)

		return payload, nil
	}
}

// EncodeDeleteBookResponse returns an encoder for responses returned by the
// epub_index_creator DeleteBook endpoint.
func EncodeDeleteBookResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteBookRequest returns a decoder for requests sent to the
// epub_index_creator DeleteBook endpoint.
func DecodeDeleteBookRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			isbn string
			err  error

			params = mux.Vars(r)
		)
		isbn = params["isbn"]
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{13}$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeleteBookPayload(isbn)

		return payload, nil
	}
}

// EncodeCreatePageResponse returns an encoder for responses returned by the
// epub_index_creator CreatePage endpoint.
func EncodeCreatePageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*epubindexcreator.PageResponse)
		enc := encoder(ctx, w)
		body := NewCreatePageOKResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreatePageRequest returns a decoder for requests sent to the
// epub_index_creator CreatePage endpoint.
func DecodeCreatePageRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreatePageRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreatePageRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			isbn string

			params = mux.Vars(r)
		)
		isbn = params["isbn"]
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{13}$"))
		if err != nil {
			return nil, err
		}
		payload := NewCreatePagePayload(&body, isbn)

		return payload, nil
	}
}

// marshalEpubindexcreatorBookResponseToBookResponseResponse builds a value of
// type *BookResponseResponse from a value of type
// *epubindexcreator.BookResponse.
func marshalEpubindexcreatorBookResponseToBookResponseResponse(v *epubindexcreator.BookResponse) *BookResponseResponse {
	res := &BookResponseResponse{
		Isbn:      string(v.Isbn),
		Title:     v.Title,
		Author:    v.Author,
		Language:  v.Language,
		Publisher: v.Publisher,
	}
	if v.Pages != nil {
		res.Pages = make([]*PageResponseResponse, len(v.Pages))
		for i, val := range v.Pages {
			res.Pages[i] = marshalEpubindexcreatorPageResponseToPageResponseResponse(val)
		}
	} else {
		res.Pages = []*PageResponseResponse{}
	}

	return res
}

// marshalEpubindexcreatorPageResponseToPageResponseResponse builds a value of
// type *PageResponseResponse from a value of type
// *epubindexcreator.PageResponse.
func marshalEpubindexcreatorPageResponseToPageResponseResponse(v *epubindexcreator.PageResponse) *PageResponseResponse {
	res := &PageResponseResponse{
		Title: v.Title,
	}
	if v.Keywords != nil {
		res.Keywords = make([]string, len(v.Keywords))
		for i, val := range v.Keywords {
			res.Keywords[i] = val
		}
	} else {
		res.Keywords = []string{}
	}

	return res
}

// marshalEpubindexcreatorPageResponseToPageResponseResponseBody builds a value
// of type *PageResponseResponseBody from a value of type
// *epubindexcreator.PageResponse.
func marshalEpubindexcreatorPageResponseToPageResponseResponseBody(v *epubindexcreator.PageResponse) *PageResponseResponseBody {
	res := &PageResponseResponseBody{
		Title: v.Title,
	}
	if v.Keywords != nil {
		res.Keywords = make([]string, len(v.Keywords))
		for i, val := range v.Keywords {
			res.Keywords[i] = val
		}
	} else {
		res.Keywords = []string{}
	}

	return res
}

// unmarshalCreatePageRequestRequestBodyToEpubindexcreatorCreatePageRequest
// builds a value of type *epubindexcreator.CreatePageRequest from a value of
// type *CreatePageRequestRequestBody.
func unmarshalCreatePageRequestRequestBodyToEpubindexcreatorCreatePageRequest(v *CreatePageRequestRequestBody) *epubindexcreator.CreatePageRequest {
	res := &epubindexcreator.CreatePageRequest{
		Title: *v.Title,
	}
	if v.Keywords != nil {
		res.Keywords = make([]string, len(v.Keywords))
		for i, val := range v.Keywords {
			res.Keywords[i] = val
		}
	}

	return res
}
