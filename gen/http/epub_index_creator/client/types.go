// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP client types
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package client

import (
	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
	goa "goa.design/goa/v3/pkg"
)

// ListBooksRequestBody is the type of the "epub_index_creator" service
// "ListBooks" endpoint HTTP request body.
type ListBooksRequestBody struct {
	// Maximum number of books to return
	Limit int `form:"limit" json:"limit" xml:"limit"`
	// Field to paginate books
	Offset int `form:"offset" json:"offset" xml:"offset"`
}

// CreateBookRequestBody is the type of the "epub_index_creator" service
// "CreateBook" endpoint HTTP request body.
type CreateBookRequestBody struct {
	Isbn string `form:"isbn" json:"isbn" xml:"isbn"`
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Language of the book
	Language string `form:"language" json:"language" xml:"language"`
	// Publisher of the book
	Publisher string `form:"publisher" json:"publisher" xml:"publisher"`
	// Pages of the book
	Pages []*PageResponseRequestBody `form:"pages" json:"pages" xml:"pages"`
}

// UpdateBookRequestBody is the type of the "epub_index_creator" service
// "UpdateBook" endpoint HTTP request body.
type UpdateBookRequestBody struct {
	// Title of the book
	Title string `form:"title" json:"title" xml:"title"`
	// Author of the book
	Author string `form:"author" json:"author" xml:"author"`
	// Language of the book
	Language string `form:"language" json:"language" xml:"language"`
	// Publisher of the book
	Publisher string `form:"publisher" json:"publisher" xml:"publisher"`
}

// CreatePageRequestBody is the type of the "epub_index_creator" service
// "CreatePage" endpoint HTTP request body.
type CreatePageRequestBody struct {
	Page *CreatePageRequestRequestBody `form:"page" json:"page" xml:"page"`
}

// ListBooksResponseBody is the type of the "epub_index_creator" service
// "ListBooks" endpoint HTTP response body.
type ListBooksResponseBody []*BookResponseResponse

// FindBookResponseBody is the type of the "epub_index_creator" service
// "FindBook" endpoint HTTP response body.
type FindBookResponseBody struct {
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Language of the book
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	// Pages of the book
	Pages []*PageResponseResponseBody `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
}

// CreateBookResponseBody is the type of the "epub_index_creator" service
// "CreateBook" endpoint HTTP response body.
type CreateBookResponseBody struct {
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Language of the book
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	// Pages of the book
	Pages []*PageResponseResponseBody `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
}

// UpdateBookResponseBody is the type of the "epub_index_creator" service
// "UpdateBook" endpoint HTTP response body.
type UpdateBookResponseBody struct {
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Language of the book
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	// Pages of the book
	Pages []*PageResponseResponseBody `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
}

// CreatePageResponseBody is the type of the "epub_index_creator" service
// "CreatePage" endpoint HTTP response body.
type CreatePageResponseBody struct {
	// Title of the page
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Keywords of the page
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// BookResponseResponse is used to define fields on response body types.
type BookResponseResponse struct {
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Language of the book
	Language *string `form:"language,omitempty" json:"language,omitempty" xml:"language,omitempty"`
	// Publisher of the book
	Publisher *string `form:"publisher,omitempty" json:"publisher,omitempty" xml:"publisher,omitempty"`
	// Pages of the book
	Pages []*PageResponseResponse `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
}

// PageResponseResponse is used to define fields on response body types.
type PageResponseResponse struct {
	// Title of the page
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Keywords of the page
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// PageResponseResponseBody is used to define fields on response body types.
type PageResponseResponseBody struct {
	// Title of the page
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Keywords of the page
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// PageResponseRequestBody is used to define fields on request body types.
type PageResponseRequestBody struct {
	// Title of the page
	Title string `form:"title" json:"title" xml:"title"`
	// Keywords of the page
	Keywords []string `form:"keywords" json:"keywords" xml:"keywords"`
}

// CreatePageRequestRequestBody is used to define fields on request body types.
type CreatePageRequestRequestBody struct {
	// Title of the page
	Title string `form:"title" json:"title" xml:"title"`
	// Keywords of the page
	Keywords []string `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// NewListBooksRequestBody builds the HTTP request body from the payload of the
// "ListBooks" endpoint of the "epub_index_creator" service.
func NewListBooksRequestBody(p *epubindexcreator.ListBooksPayload) *ListBooksRequestBody {
	body := &ListBooksRequestBody{
		Limit:  p.Limit,
		Offset: p.Offset,
	}
	{
		var zero int
		if body.Limit == zero {
			body.Limit = 100
		}
	}
	{
		var zero int
		if body.Offset == zero {
			body.Offset = 0
		}
	}
	return body
}

// NewCreateBookRequestBody builds the HTTP request body from the payload of
// the "CreateBook" endpoint of the "epub_index_creator" service.
func NewCreateBookRequestBody(p *epubindexcreator.BookResponse) *CreateBookRequestBody {
	body := &CreateBookRequestBody{
		Isbn:      string(p.Isbn),
		Title:     p.Title,
		Author:    p.Author,
		Language:  p.Language,
		Publisher: p.Publisher,
	}
	if p.Pages != nil {
		body.Pages = make([]*PageResponseRequestBody, len(p.Pages))
		for i, val := range p.Pages {
			body.Pages[i] = marshalEpubindexcreatorPageResponseToPageResponseRequestBody(val)
		}
	} else {
		body.Pages = []*PageResponseRequestBody{}
	}
	return body
}

// NewUpdateBookRequestBody builds the HTTP request body from the payload of
// the "UpdateBook" endpoint of the "epub_index_creator" service.
func NewUpdateBookRequestBody(p *epubindexcreator.BookRequest) *UpdateBookRequestBody {
	body := &UpdateBookRequestBody{
		Title:     p.Title,
		Author:    p.Author,
		Language:  p.Language,
		Publisher: p.Publisher,
	}
	return body
}

// NewCreatePageRequestBody builds the HTTP request body from the payload of
// the "CreatePage" endpoint of the "epub_index_creator" service.
func NewCreatePageRequestBody(p *epubindexcreator.CreatePagePayload) *CreatePageRequestBody {
	body := &CreatePageRequestBody{}
	if p.Page != nil {
		body.Page = marshalEpubindexcreatorCreatePageRequestToCreatePageRequestRequestBody(p.Page)
	}
	return body
}

// NewListBooksBookResponseOK builds a "epub_index_creator" service "ListBooks"
// endpoint result from a HTTP "OK" response.
func NewListBooksBookResponseOK(body []*BookResponseResponse) []*epubindexcreator.BookResponse {
	v := make([]*epubindexcreator.BookResponse, len(body))
	for i, val := range body {
		v[i] = unmarshalBookResponseResponseToEpubindexcreatorBookResponse(val)
	}

	return v
}

// NewFindBookBookResponseOK builds a "epub_index_creator" service "FindBook"
// endpoint result from a HTTP "OK" response.
func NewFindBookBookResponseOK(body *FindBookResponseBody) *epubindexcreator.BookResponse {
	v := &epubindexcreator.BookResponse{
		Isbn:      epubindexcreator.ISBN(*body.Isbn),
		Title:     *body.Title,
		Author:    *body.Author,
		Language:  *body.Language,
		Publisher: *body.Publisher,
	}
	v.Pages = make([]*epubindexcreator.PageResponse, len(body.Pages))
	for i, val := range body.Pages {
		v.Pages[i] = unmarshalPageResponseResponseBodyToEpubindexcreatorPageResponse(val)
	}

	return v
}

// NewCreateBookBookResponseOK builds a "epub_index_creator" service
// "CreateBook" endpoint result from a HTTP "OK" response.
func NewCreateBookBookResponseOK(body *CreateBookResponseBody) *epubindexcreator.BookResponse {
	v := &epubindexcreator.BookResponse{
		Isbn:      epubindexcreator.ISBN(*body.Isbn),
		Title:     *body.Title,
		Author:    *body.Author,
		Language:  *body.Language,
		Publisher: *body.Publisher,
	}
	v.Pages = make([]*epubindexcreator.PageResponse, len(body.Pages))
	for i, val := range body.Pages {
		v.Pages[i] = unmarshalPageResponseResponseBodyToEpubindexcreatorPageResponse(val)
	}

	return v
}

// NewUpdateBookBookResponseOK builds a "epub_index_creator" service
// "UpdateBook" endpoint result from a HTTP "OK" response.
func NewUpdateBookBookResponseOK(body *UpdateBookResponseBody) *epubindexcreator.BookResponse {
	v := &epubindexcreator.BookResponse{
		Isbn:      epubindexcreator.ISBN(*body.Isbn),
		Title:     *body.Title,
		Author:    *body.Author,
		Language:  *body.Language,
		Publisher: *body.Publisher,
	}
	v.Pages = make([]*epubindexcreator.PageResponse, len(body.Pages))
	for i, val := range body.Pages {
		v.Pages[i] = unmarshalPageResponseResponseBodyToEpubindexcreatorPageResponse(val)
	}

	return v
}

// NewCreatePagePageResponseOK builds a "epub_index_creator" service
// "CreatePage" endpoint result from a HTTP "OK" response.
func NewCreatePagePageResponseOK(body *CreatePageResponseBody) *epubindexcreator.PageResponse {
	v := &epubindexcreator.PageResponse{
		Title: *body.Title,
	}
	v.Keywords = make([]string, len(body.Keywords))
	for i, val := range body.Keywords {
		v.Keywords[i] = val
	}

	return v
}

// ValidateFindBookResponseBody runs the validations defined on
// FindBookResponseBody
func ValidateFindBookResponseBody(body *FindBookResponseBody) (err error) {
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Publisher == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publisher", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.isbn", *body.Isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
	}
	for _, e := range body.Pages {
		if e != nil {
			if err2 := ValidatePageResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreateBookResponseBody runs the validations defined on
// CreateBookResponseBody
func ValidateCreateBookResponseBody(body *CreateBookResponseBody) (err error) {
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Publisher == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publisher", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.isbn", *body.Isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
	}
	for _, e := range body.Pages {
		if e != nil {
			if err2 := ValidatePageResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUpdateBookResponseBody runs the validations defined on
// UpdateBookResponseBody
func ValidateUpdateBookResponseBody(body *UpdateBookResponseBody) (err error) {
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Publisher == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publisher", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.isbn", *body.Isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
	}
	for _, e := range body.Pages {
		if e != nil {
			if err2 := ValidatePageResponseResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateCreatePageResponseBody runs the validations defined on
// CreatePageResponseBody
func ValidateCreatePageResponseBody(body *CreatePageResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Keywords == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keywords", "body"))
	}
	return
}

// ValidateBookResponseResponse runs the validations defined on
// BookResponseResponse
func ValidateBookResponseResponse(body *BookResponseResponse) (err error) {
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Language == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("language", "body"))
	}
	if body.Publisher == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("publisher", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	if body.Isbn != nil {
		err = goa.MergeErrors(err, goa.ValidatePattern("body.isbn", *body.Isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
	}
	for _, e := range body.Pages {
		if e != nil {
			if err2 := ValidatePageResponseResponse(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePageResponseResponse runs the validations defined on
// PageResponseResponse
func ValidatePageResponseResponse(body *PageResponseResponse) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Keywords == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keywords", "body"))
	}
	return
}

// ValidatePageResponseResponseBody runs the validations defined on
// PageResponseResponseBody
func ValidatePageResponseResponseBody(body *PageResponseResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Keywords == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keywords", "body"))
	}
	return
}

// ValidatePageResponseRequestBody runs the validations defined on
// PageResponseRequestBody
func ValidatePageResponseRequestBody(body *PageResponseRequestBody) (err error) {
	if body.Keywords == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keywords", "body"))
	}
	return
}
