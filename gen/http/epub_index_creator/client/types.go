// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP client types
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package client

import (
	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
	goa "goa.design/goa/v3/pkg"
)

// ListResponseBody is the type of the "epub_index_creator" service "List"
// endpoint HTTP response body.
type ListResponseBody struct {
	// ISBN of the book
	Isbn *string `form:"isbn,omitempty" json:"isbn,omitempty" xml:"isbn,omitempty"`
	// Title of the book
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Author of the book
	Author *string `form:"author,omitempty" json:"author,omitempty" xml:"author,omitempty"`
	// Pages of the book
	Pages []*PageResponseBody `form:"pages,omitempty" json:"pages,omitempty" xml:"pages,omitempty"`
}

// PageResponseBody is used to define fields on response body types.
type PageResponseBody struct {
	// Title of the page
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Keywords of the page
	Keywords []*KeywordResponseBody `form:"keywords,omitempty" json:"keywords,omitempty" xml:"keywords,omitempty"`
}

// KeywordResponseBody is used to define fields on response body types.
type KeywordResponseBody struct {
	// Keyword of the page
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty" xml:"keyword,omitempty"`
}

// NewListBookOK builds a "epub_index_creator" service "List" endpoint result
// from a HTTP "OK" response.
func NewListBookOK(body *ListResponseBody) *epubindexcreator.Book {
	v := &epubindexcreator.Book{
		Isbn:   *body.Isbn,
		Title:  *body.Title,
		Author: *body.Author,
	}
	v.Pages = make([]*epubindexcreator.Page, len(body.Pages))
	for i, val := range body.Pages {
		v.Pages[i] = unmarshalPageResponseBodyToEpubindexcreatorPage(val)
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Isbn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isbn", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Author == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("author", "body"))
	}
	if body.Pages == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("pages", "body"))
	}
	for _, e := range body.Pages {
		if e != nil {
			if err2 := ValidatePageResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidatePageResponseBody runs the validations defined on PageResponseBody
func ValidatePageResponseBody(body *PageResponseBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Keywords == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keywords", "body"))
	}
	for _, e := range body.Keywords {
		if e != nil {
			if err2 := ValidateKeywordResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateKeywordResponseBody runs the validations defined on
// KeywordResponseBody
func ValidateKeywordResponseBody(body *KeywordResponseBody) (err error) {
	if body.Keyword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("keyword", "body"))
	}
	return
}
