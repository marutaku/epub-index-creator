// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP client CLI support package
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package client

import (
	"encoding/json"
	"fmt"

	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
	goa "goa.design/goa/v3/pkg"
)

// BuildListBooksPayload builds the payload for the epub_index_creator
// ListBooks endpoint from CLI flags.
func BuildListBooksPayload(epubIndexCreatorListBooksBody string) (*epubindexcreator.ListBooksPayload, error) {
	var err error
	var body ListBooksRequestBody
	{
		err = json.Unmarshal([]byte(epubIndexCreatorListBooksBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"limit\": 11,\n      \"offset\": 3696960733945795768\n   }'")
		}
	}
	v := &epubindexcreator.ListBooksPayload{
		Limit:  body.Limit,
		Offset: body.Offset,
	}
	{
		var zero int
		if v.Limit == zero {
			v.Limit = 100
		}
	}
	{
		var zero int
		if v.Offset == zero {
			v.Offset = 0
		}
	}

	return v, nil
}

// BuildFindBookPayload builds the payload for the epub_index_creator FindBook
// endpoint from CLI flags.
func BuildFindBookPayload(epubIndexCreatorFindBookIsbn string) (*epubindexcreator.FindBookPayload, error) {
	var err error
	var isbn string
	{
		isbn = epubIndexCreatorFindBookIsbn
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
		if err != nil {
			return nil, err
		}
	}
	v := &epubindexcreator.FindBookPayload{}
	v.Isbn = epubindexcreator.ISBN(isbn)

	return v, nil
}

// BuildCreateBookPayload builds the payload for the epub_index_creator
// CreateBook endpoint from CLI flags.
func BuildCreateBookPayload(epubIndexCreatorCreateBookBody string) (*epubindexcreator.BookRequest, error) {
	var err error
	var body CreateBookRequestBody
	{
		err = json.Unmarshal([]byte(epubIndexCreatorCreateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Hic temporibus numquam distinctio alias.\",\n      \"isbn\": \"940-79908-7-75-7\",\n      \"language\": \"Dolor aliquam.\",\n      \"publisher\": \"Eligendi placeat.\",\n      \"title\": \"Cum omnis dolores quo sit.\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.isbn", body.Isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
		if err != nil {
			return nil, err
		}
	}
	v := &epubindexcreator.BookRequest{
		Isbn:      epubindexcreator.ISBN(body.Isbn),
		Title:     body.Title,
		Author:    body.Author,
		Language:  body.Language,
		Publisher: body.Publisher,
	}

	return v, nil
}

// BuildUpdateBookPayload builds the payload for the epub_index_creator
// UpdateBook endpoint from CLI flags.
func BuildUpdateBookPayload(epubIndexCreatorUpdateBookBody string, epubIndexCreatorUpdateBookIsbn string) (*epubindexcreator.BookRequest, error) {
	var err error
	var body UpdateBookRequestBody
	{
		err = json.Unmarshal([]byte(epubIndexCreatorUpdateBookBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"author\": \"Eligendi ipsa porro.\",\n      \"language\": \"Qui in omnis quaerat odit.\",\n      \"publisher\": \"Ut repudiandae beatae et non consequatur dolore.\",\n      \"title\": \"Quibusdam vero rem aliquam voluptatibus.\"\n   }'")
		}
	}
	var isbn string
	{
		isbn = epubIndexCreatorUpdateBookIsbn
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
		if err != nil {
			return nil, err
		}
	}
	v := &epubindexcreator.BookRequest{
		Title:     body.Title,
		Author:    body.Author,
		Language:  body.Language,
		Publisher: body.Publisher,
	}
	v.Isbn = epubindexcreator.ISBN(isbn)

	return v, nil
}

// BuildDeleteBookPayload builds the payload for the epub_index_creator
// DeleteBook endpoint from CLI flags.
func BuildDeleteBookPayload(epubIndexCreatorDeleteBookIsbn string) (*epubindexcreator.DeleteBookPayload, error) {
	var err error
	var isbn string
	{
		isbn = epubIndexCreatorDeleteBookIsbn
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
		if err != nil {
			return nil, err
		}
	}
	v := &epubindexcreator.DeleteBookPayload{}
	v.Isbn = epubindexcreator.ISBN(isbn)

	return v, nil
}

// BuildCreatePagePayload builds the payload for the epub_index_creator
// CreatePage endpoint from CLI flags.
func BuildCreatePagePayload(epubIndexCreatorCreatePageBody string, epubIndexCreatorCreatePageIsbn string) (*epubindexcreator.CreatePagePayload, error) {
	var err error
	var body CreatePageRequestBody
	{
		err = json.Unmarshal([]byte(epubIndexCreatorCreatePageBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"page\": {\n         \"keywords\": [\n            \"Introduction\",\n            \"Chapter 1\",\n            \"Chapter 2\"\n         ],\n         \"title\": \"Introduction\"\n      }\n   }'")
		}
		if body.Page == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("page", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	var isbn string
	{
		isbn = epubIndexCreatorCreatePageIsbn
		err = goa.MergeErrors(err, goa.ValidatePattern("isbn", isbn, "^[0-9]{3}-[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,7}-[0-9]$"))
		if err != nil {
			return nil, err
		}
	}
	v := &epubindexcreator.CreatePagePayload{}
	if body.Page != nil {
		v.Page = marshalCreatePageRequestRequestBodyToEpubindexcreatorCreatePageRequest(body.Page)
	}
	v.Isbn = epubindexcreator.ISBN(isbn)

	return v, nil
}
