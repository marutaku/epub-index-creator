// Code generated by goa v3.15.0, DO NOT EDIT.
//
// epub_index_creator HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/marutaku/epub-index-creator/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	epubindexcreator "github.com/marutaku/epub-index-creator/gen/epub_index_creator"
	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "epub_index_creator" service "List" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		isbn string
	)
	{
		p, ok := v.(*epubindexcreator.ListPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("epub_index_creator", "List", "*epubindexcreator.ListPayload", v)
		}
		isbn = p.Isbn
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListEpubIndexCreatorPath(isbn)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("epub_index_creator", "List", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the
// epub_index_creator List endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("epub_index_creator", "List", err)
			}
			err = ValidateListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("epub_index_creator", "List", err)
			}
			res := NewListBookOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("epub_index_creator", "List", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPageResponseBodyToEpubindexcreatorPage builds a value of type
// *epubindexcreator.Page from a value of type *PageResponseBody.
func unmarshalPageResponseBodyToEpubindexcreatorPage(v *PageResponseBody) *epubindexcreator.Page {
	res := &epubindexcreator.Page{
		Title: *v.Title,
	}
	res.Keywords = make([]*epubindexcreator.Keyword, len(v.Keywords))
	for i, val := range v.Keywords {
		res.Keywords[i] = unmarshalKeywordResponseBodyToEpubindexcreatorKeyword(val)
	}

	return res
}

// unmarshalKeywordResponseBodyToEpubindexcreatorKeyword builds a value of type
// *epubindexcreator.Keyword from a value of type *KeywordResponseBody.
func unmarshalKeywordResponseBodyToEpubindexcreatorKeyword(v *KeywordResponseBody) *epubindexcreator.Keyword {
	res := &epubindexcreator.Keyword{
		Keyword: *v.Keyword,
	}

	return res
}
